{"$schema":"https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/raw/master/dist/sast-report-format.json","version":"15.0.4","vulnerabilities":[{"id":"73c162a0028b1f701522f05177825ff7_0","category":"sast","name":"Unsanitized external input in SQL query","description":"\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n","solution":"\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","severity":"Critical","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/ProductService.java","start_line":48,"end_line":48},"identifiers":[{"type":"bearer","name":"java_lang_sqli","value":"java_lang_sqli","url":"https://docs.bearer.com/reference/rules/java_lang_sqli"},{"type":"cwe","name":"CWE-89","value":"89","url":"https://cwe.mitre.org/data/definitions/89.html"}]},{"id":"b3ad3263cc88f7f7f09dc1ea0fcfe0c8_0","category":"sast","name":"Unsanitized external input in SQL query","description":"\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n","solution":"\n\n- **Do not** include unsanitized input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\" + uri.getQueryParameter(\"user_id\") + \"'\"));\n  ```\n- **Do** use prepared statements for SQL queries to safely include external input.\n  ```java\n  PreparedStatement myStmt = myCon.prepareStatement(\"select * from students where age \u003e ? and name = ?\");\n  myStmt.setInt(1, uri.getQueryParameter(\"age\"));\n  myStmt.setString(2, uri.getQueryParameter(\"name\"));\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","severity":"Critical","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/UserService.java","start_line":75,"end_line":75},"identifiers":[{"type":"bearer","name":"java_lang_sqli","value":"java_lang_sqli","url":"https://docs.bearer.com/reference/rules/java_lang_sqli"},{"type":"cwe","name":"CWE-89","value":"89","url":"https://cwe.mitre.org/data/definitions/89.html"}]},{"id":"4c567f9457288a9fb0850939875f9314_0","category":"sast","name":"Observable Timing Discrepancy","description":"\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n","solution":"\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```java\n    boolean isAdmin = \"admin\".equals(username); // unsafe\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)","severity":"Medium","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/UserRegistrationService.java","start_line":26,"end_line":26},"identifiers":[{"type":"bearer","name":"java_lang_observable_timing","value":"java_lang_observable_timing","url":"https://docs.bearer.com/reference/rules/java_lang_observable_timing"},{"type":"cwe","name":"CWE-208","value":"208","url":"https://cwe.mitre.org/data/definitions/208.html"}]},{"id":"4ffa2513a411c404446f129dc95ac404_0","category":"sast","name":"Observable Timing Discrepancy","description":"\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n","solution":"\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```java\n    boolean isAdmin = \"admin\".equals(username); // unsafe\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)","severity":"Medium","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/UserService.java","start_line":52,"end_line":52},"identifiers":[{"type":"bearer","name":"java_lang_observable_timing","value":"java_lang_observable_timing","url":"https://docs.bearer.com/reference/rules/java_lang_observable_timing"},{"type":"cwe","name":"CWE-208","value":"208","url":"https://cwe.mitre.org/data/definitions/208.html"}]},{"id":"0af62f209a8cae1243f0c33e65638007_0","category":"sast","name":"Leakage of information in logger message","description":"\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n","solution":"\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","severity":"Low","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/ProductService.java","start_line":28,"end_line":28},"identifiers":[{"type":"bearer","name":"java_lang_logger_leak","value":"java_lang_logger_leak","url":"https://docs.bearer.com/reference/rules/java_lang_logger_leak"},{"type":"cwe","name":"CWE-532","value":"532","url":"https://cwe.mitre.org/data/definitions/532.html"}]},{"id":"8d16b83862a364cbad4ebc9ba81daaeb_0","category":"sast","name":"Leakage of information in logger message","description":"\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n","solution":"\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","severity":"Low","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/UserService.java","start_line":29,"end_line":29},"identifiers":[{"type":"bearer","name":"java_lang_logger_leak","value":"java_lang_logger_leak","url":"https://docs.bearer.com/reference/rules/java_lang_logger_leak"},{"type":"cwe","name":"CWE-532","value":"532","url":"https://cwe.mitre.org/data/definitions/532.html"}]},{"id":"8d16b83862a364cbad4ebc9ba81daaeb_1","category":"sast","name":"Leakage of information in logger message","description":"\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n","solution":"\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","severity":"Low","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/UserService.java","start_line":93,"end_line":94},"identifiers":[{"type":"bearer","name":"java_lang_logger_leak","value":"java_lang_logger_leak","url":"https://docs.bearer.com/reference/rules/java_lang_logger_leak"},{"type":"cwe","name":"CWE-532","value":"532","url":"https://cwe.mitre.org/data/definitions/532.html"}]},{"id":"8d16b83862a364cbad4ebc9ba81daaeb_2","category":"sast","name":"Leakage of information in logger message","description":"\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n","solution":"\n\n- **Do not** include variables or dynamic data containing sensitive information in logger messages. This can inadvertently expose sensitive data in logs, which are often not adequately protected.\n  ```java\n  logger.info(\"user signed in: \" + user.uuid) // unsafe\n  ```\n- **Do** log static messages that do not contain dynamic variables or attributes. This minimizes the risk of accidentally logging sensitive information.\n  ```java\n  logger.info(\"user signed in\")\n  ```\n\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)","severity":"Low","confidence":"Unknown","raw_source_code_extract":"","scanner":{"id":"bearer","name":"Bearer"},"location":{"file":"src/main/java/com/appsecco/dvja/services/UserService.java","start_line":104,"end_line":104},"identifiers":[{"type":"bearer","name":"java_lang_logger_leak","value":"java_lang_logger_leak","url":"https://docs.bearer.com/reference/rules/java_lang_logger_leak"},{"type":"cwe","name":"CWE-532","value":"532","url":"https://cwe.mitre.org/data/definitions/532.html"}]}],"scan":{"analyzer":{"id":"bearer-sast","name":"Bearer SAST","url":"https://github.com/bearer/bearer","vendor":{"name":"Bearer"},"version":"1.46.4"},"scanner":{"id":"bearer","name":"Bearer","url":"https://github.com/bearer/bearer","vendor":{"name":"Bearer"},"version":"1.46.4"},"type":"sast","start_time":"2024-10-22T20:51:31","end_time":"2024-10-22T20:51:33","status":"failure"}}
